Running the code
################

Download the code
=================

Check out the code using

.. code:: bash

 git clone https://github.com/magic-sph/magic.git

or via SSH (requires a public key)

.. code:: bash

 git clone ssh://git@github.com/magic-sph/magic.git

Setting up the environment
==========================

Go to the checked out directory ``magic`` and source the environment variables (useful for python tools and auto-test)

.. code:: bash
 
 source sourceme.sh

For csh or tcsh shells use

.. code:: csh
 
 source sourceme.csh

Setting up compiler options and compiling
=========================================

Go to the directory of the sourcefiles :code:`cd $MAGIC_HOME/src` and edit the ``Makefile`` to specify your compiler options.

Makefile options
----------------

**Select compiler**

Set a suitable compiler in the first line of the Makefile: ``COMPILER = <compiler_phrase>``. The options are ``intel``, ``gnu`` or ``amd`` - depending on your available compilers.

*List of default compilers*

+-----------------+---------------+------------------+ 
| Compiler Option |    Normal     |     With MPI     |
+-----------------+---------------+------------------+
| intel           | ifort, icc    | mpiifort, mpiicc |
+-----------------+---------------+------------------+
| gnu             | gfortran, gcc | mpif90, mpicc    |
+-----------------+---------------+------------------+
| amd             | openf95       |                  |
+-----------------+---------------+------------------+

**Select compiling options**

* ``PRODRUN`` Set it to ``yes`` for production run, ``no`` for debugging.
* ``OPENMP``  Set to ``yes`` to use openmp
* ``PRECISION`` Set it to 'dble' for double-precision calculations or to 'sngl' for single-precision calculations
* ``OUT_PREC`` Set it to 'dble' for double-precision in binary outputs or to 'sngl' for single precision
* ``DEBUG``   Set to ``yes`` to run in debugging mode. *While running in debugging mode, set* ``PRODRUN`` *to* ``no``. The debug mode with intel compilers uses ``marmot90``. 
* ``USE_MPI`` Set to ``yes`` to use MPI
* ``USE_FFTLIB`` This option lets you select the library you want to use for Fast Fourier Transforms. This can be set to 'JW' or 'MKL'. 'JW' refers to the inbuilt library by **J** ohannes **W** icht, while 'MKL' refers to the `Intel Math Kernel Library <https://software.intel.com/en-us/intel-mkl>`_. Use 'JW' if you don't have Intel MKL installed.
* ``USE_MKL`` Set to ``yes`` if you have Intel MKL installed and want to use it for matrix operations.
* ``USE_HDF5`` Set to ``yes`` if you want the restart file to be written in HDF5 format

**Architecture (Intel compilers only)**

If you're using intel compilers and if your computer is capable of following specific intel instruction sets (sse3 or AVX), then set ``FFLAG_ARCH_OPT = -xsse3`` or ``FFLAG_ARCH_OPT = -xAVX`` under intel compiler options.

**MPI_INCPATH**

Make sure you set the path for your mpi header file ``mpif.h`` in ``MPI_INCPATH``. The path depends on the computer. For PCs, this is commonly ``/usr/include`` or ``/usr/include/mpi``. Use `Open MPI <http://www.open-mpi.de/>`_ for running MagIC on a PC.

**Other compilers**

If your available compilers are different from the options provided in the Makefile, then change them suitably using the options ``COMP_FC`` and ``COMP_CC`` for serial fortran and C compilers and ``COMP_MPFC`` and ``COMP_MPCC`` for compilers with mpi implementation.


Compiling the code
------------------

Once you've set up your compiling options compile the code using

.. code:: bash

 make -j

The compiler should produce the executable ``magic.exe``.

If you want to recompiler the code from scratch do

.. code:: bash

 make clean

to remove all the files generated by the compiler.

Once the executable is built, you are now ready to run your first production run.

Preparing a production run
==========================

After building the executable, use one of the namelists from the ``samples`` folder (called ``input.nml``) and run **MagIC** as follows:

Running the code without OpenMP::
  
  mpiexec -n <n_mpi> ./magic.exe input.nml

Running the code with OpenMP::
  
  export OMP_NUM_THREAD = <n_omp>
  mpiexec -n <n_mpi> ./magic.exe input.nml

where ``<n_mpi>`` is the number of MPI ranks to be used by the code and ``<n_omp>`` is the number of OpenMP threads to be used. Note that the ``n_r_max`` must be a multiple of ``<n_mpi>``, where ``n_r_max`` is the number of radial grid points (see the chapter on Namelist). 
